#! /usr/bin/env perl

use v5.12;
use warnings;

use FindBin;
use local::lib $FindBin::Bin =~ s{/bin$}{/local-lib}r;
use lib $FindBin::Bin =~ s{/bin$}{/lib}r;

my $project_dir = $FindBin::Bin =~ s{/bin$}{}r;

use IO::Select;
use Term::ReadKey;

use POSIX qw/ WNOHANG setsid /;
use autodie qw/ :all /;
use List::AllUtils qw/ any /;

use JCC::Music::Player::Schema;

use JCC::Music::Player::Rules qw/ update_db_from_file_system category is_sabbath genres_to_use christmas christmas_genres /;

$|++;

my $schema = JCC::Music::Player::Schema->connect("dbi:SQLite:dbname=$project_dir/data/priorities.db", '', '');

my $dir = qq{$ENV{HOME}/Music};
update_db_from_file_system($schema, $dir);

ReadMode 'cbreak';

my $tolerance = 0;

my $category;

sub available_tracks() {
    $schema->resultset('Track')
        ->search({ genre => { -in => [ christmas ? christmas_genres($category) : genres_to_use($category) ], }, })
}

my @queue;

sub hist_length() { 10 }
sub good_threshold() { 90 }

my @hist;

sub good_songs() { scalar(grep { $_->score_pct >= good_threshold } @hist) }

sub num_songs() { scalar(@{[ qx{q -c $category} ]}) }

sub page_length() { 20 }

track: while (1) {
    # make room in @hist for new track
    shift @hist while @hist > hist_length - 1;

    $category = category;

    while (num_songs >= page_length) {
        if (defined(my $key = ReadKey(-1))) {
            if ($key eq 'q') {
                exit 0;
            }
        }
        sleep(1);
        $category = category;
    }

    # get new track
    while (!@queue) {
        my $rs = available_tracks;
        # prefer 'good' songs
        my $threshold = good_threshold;
        $threshold -= 10 while $threshold > 0 && rand() * 10 < $tolerance;
        my $lower_threshold = $threshold;
        $lower_threshold -= 10 while $lower_threshold > 0 && rand() * 10 < 5;
        $rs = $rs->apply_threshold($lower_threshold, $threshold);
        @queue = $rs->nth_row->all();
    }
    my $row = shift @queue;
    push @hist, $row;

    if (is_sabbath && $row->score >= good_threshold / 100) {
        printf qq{%s (%d)\n}, $row->filename, $row->score_pct;
        system 'enq', '-a', '-c', $category, $row->filename;
        next track;
    }

    prompt:
    printf "%s (%s) (%d)? ", $row->filename =~ s{^\Q$dir/}{}r, $row->genre, $row->score_pct;

    key:
    if (defined(my $key = ReadKey(0))) {
        if ($key eq 'y') {
            $row->add_score(1);
            printf qq{(%d)\n}, $row->score_pct;
            system 'enq', '-a', '-c', $category, $row->filename;
            next track;
        } elsif ($key eq 'n') {
            $row->add_score(0);
            printf qq{(%d)\n}, $row->score_pct;
            next track;
        } elsif ($key eq 'w') {
            print qq{\n};
            next track;
        } elsif ($key eq '+') {
            next key if $tolerance >= hist_length;
            $tolerance++;
            printf qq{(tol %d) }, $tolerance;
            goto key;
        } elsif ($key eq '-') {
            goto key if $tolerance <= 0;
            $tolerance--;
            printf qq{ (tol %d) }, $tolerance;
            $row->add_score(0);
            printf qq{(%d)\n}, $row->score_pct;
            next track;
        } elsif ($key eq '/') {
            print qq{\n};
            ReadMode 'normal';
            print q{/ };
            chomp(my $nm = <>);
            push @queue, available_tracks
                ->search({ filename => { -like => "%$nm%", } })
                ->all()
            ;
            ReadMode 'cbreak';
            next track;
	} elsif ($key eq "\n") {
	    printf qq{\n\n};
	    goto prompt;
        } elsif ($key eq 'q') {
            printf qq{\n};
            exit 0;
        } else {
            printf qq{Unknown key %s; ? }, $key;
            goto key;
        }
    }
}

exit 0;

END { ReadMode 'restore'; print qq{\n}; }
